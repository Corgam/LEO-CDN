# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import stub_pb2 as stub__pb2


class ClientStub(object):
    """This is a Client that calls the exthandler of FReD
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateKeygroup = channel.unary_unary(
                '/mcc.fred.client.Client/CreateKeygroup',
                request_serializer=stub__pb2.CreateKeygroupRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.DeleteKeygroup = channel.unary_unary(
                '/mcc.fred.client.Client/DeleteKeygroup',
                request_serializer=stub__pb2.DeleteKeygroupRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.Read = channel.unary_unary(
                '/mcc.fred.client.Client/Read',
                request_serializer=stub__pb2.ReadRequest.SerializeToString,
                response_deserializer=stub__pb2.ReadResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/mcc.fred.client.Client/Update',
                request_serializer=stub__pb2.UpdateRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/mcc.fred.client.Client/Delete',
                request_serializer=stub__pb2.DeleteRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.Append = channel.unary_unary(
                '/mcc.fred.client.Client/Append',
                request_serializer=stub__pb2.AppendRequest.SerializeToString,
                response_deserializer=stub__pb2.AppendResponse.FromString,
                )
        self.AddReplica = channel.unary_unary(
                '/mcc.fred.client.Client/AddReplica',
                request_serializer=stub__pb2.AddReplicaRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.GetKeygroupReplica = channel.unary_unary(
                '/mcc.fred.client.Client/GetKeygroupReplica',
                request_serializer=stub__pb2.GetKeygroupReplicaRequest.SerializeToString,
                response_deserializer=stub__pb2.GetKeygroupReplicaResponse.FromString,
                )
        self.RemoveReplica = channel.unary_unary(
                '/mcc.fred.client.Client/RemoveReplica',
                request_serializer=stub__pb2.RemoveReplicaRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.GetReplica = channel.unary_unary(
                '/mcc.fred.client.Client/GetReplica',
                request_serializer=stub__pb2.GetReplicaRequest.SerializeToString,
                response_deserializer=stub__pb2.GetReplicaResponse.FromString,
                )
        self.GetAllReplica = channel.unary_unary(
                '/mcc.fred.client.Client/GetAllReplica',
                request_serializer=stub__pb2.GetAllReplicaRequest.SerializeToString,
                response_deserializer=stub__pb2.GetAllReplicaResponse.FromString,
                )
        self.GetKeygroupTriggers = channel.unary_unary(
                '/mcc.fred.client.Client/GetKeygroupTriggers',
                request_serializer=stub__pb2.GetKeygroupTriggerRequest.SerializeToString,
                response_deserializer=stub__pb2.GetKeygroupTriggerResponse.FromString,
                )
        self.AddTrigger = channel.unary_unary(
                '/mcc.fred.client.Client/AddTrigger',
                request_serializer=stub__pb2.AddTriggerRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.RemoveTrigger = channel.unary_unary(
                '/mcc.fred.client.Client/RemoveTrigger',
                request_serializer=stub__pb2.RemoveTriggerRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/mcc.fred.client.Client/AddUser',
                request_serializer=stub__pb2.UserRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )
        self.RemoveUser = channel.unary_unary(
                '/mcc.fred.client.Client/RemoveUser',
                request_serializer=stub__pb2.UserRequest.SerializeToString,
                response_deserializer=stub__pb2.StatusResponse.FromString,
                )


class ClientServicer(object):
    """This is a Client that calls the exthandler of FReD
    """

    def CreateKeygroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteKeygroup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Append(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeygroupReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetKeygroupTriggers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateKeygroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateKeygroup,
                    request_deserializer=stub__pb2.CreateKeygroupRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'DeleteKeygroup': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteKeygroup,
                    request_deserializer=stub__pb2.DeleteKeygroupRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=stub__pb2.ReadRequest.FromString,
                    response_serializer=stub__pb2.ReadResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=stub__pb2.UpdateRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=stub__pb2.DeleteRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'Append': grpc.unary_unary_rpc_method_handler(
                    servicer.Append,
                    request_deserializer=stub__pb2.AppendRequest.FromString,
                    response_serializer=stub__pb2.AppendResponse.SerializeToString,
            ),
            'AddReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.AddReplica,
                    request_deserializer=stub__pb2.AddReplicaRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'GetKeygroupReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeygroupReplica,
                    request_deserializer=stub__pb2.GetKeygroupReplicaRequest.FromString,
                    response_serializer=stub__pb2.GetKeygroupReplicaResponse.SerializeToString,
            ),
            'RemoveReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveReplica,
                    request_deserializer=stub__pb2.RemoveReplicaRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'GetReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.GetReplica,
                    request_deserializer=stub__pb2.GetReplicaRequest.FromString,
                    response_serializer=stub__pb2.GetReplicaResponse.SerializeToString,
            ),
            'GetAllReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllReplica,
                    request_deserializer=stub__pb2.GetAllReplicaRequest.FromString,
                    response_serializer=stub__pb2.GetAllReplicaResponse.SerializeToString,
            ),
            'GetKeygroupTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetKeygroupTriggers,
                    request_deserializer=stub__pb2.GetKeygroupTriggerRequest.FromString,
                    response_serializer=stub__pb2.GetKeygroupTriggerResponse.SerializeToString,
            ),
            'AddTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.AddTrigger,
                    request_deserializer=stub__pb2.AddTriggerRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'RemoveTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveTrigger,
                    request_deserializer=stub__pb2.RemoveTriggerRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=stub__pb2.UserRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
            'RemoveUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUser,
                    request_deserializer=stub__pb2.UserRequest.FromString,
                    response_serializer=stub__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcc.fred.client.Client', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Client(object):
    """This is a Client that calls the exthandler of FReD
    """

    @staticmethod
    def CreateKeygroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/CreateKeygroup',
            stub__pb2.CreateKeygroupRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteKeygroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/DeleteKeygroup',
            stub__pb2.DeleteKeygroupRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/Read',
            stub__pb2.ReadRequest.SerializeToString,
            stub__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/Update',
            stub__pb2.UpdateRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/Delete',
            stub__pb2.DeleteRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Append(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/Append',
            stub__pb2.AppendRequest.SerializeToString,
            stub__pb2.AppendResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/AddReplica',
            stub__pb2.AddReplicaRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKeygroupReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/GetKeygroupReplica',
            stub__pb2.GetKeygroupReplicaRequest.SerializeToString,
            stub__pb2.GetKeygroupReplicaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/RemoveReplica',
            stub__pb2.RemoveReplicaRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/GetReplica',
            stub__pb2.GetReplicaRequest.SerializeToString,
            stub__pb2.GetReplicaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/GetAllReplica',
            stub__pb2.GetAllReplicaRequest.SerializeToString,
            stub__pb2.GetAllReplicaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetKeygroupTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/GetKeygroupTriggers',
            stub__pb2.GetKeygroupTriggerRequest.SerializeToString,
            stub__pb2.GetKeygroupTriggerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/AddTrigger',
            stub__pb2.AddTriggerRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/RemoveTrigger',
            stub__pb2.RemoveTriggerRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/AddUser',
            stub__pb2.UserRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mcc.fred.client.Client/RemoveUser',
            stub__pb2.UserRequest.SerializeToString,
            stub__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
